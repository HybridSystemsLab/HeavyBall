%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: HBFcomparison.pdf
%%Creator: (Adobe Acrobat 20.12.0)
%%For: Ricardo
%%CreationDate: 9/15/20, 12:07 PM
%%BoundingBox: 0 0 560 420
%%HiResBoundingBox: 0 0 560 420
%%CropBox: 0 0 560 420
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1008 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2020-09-15T11:48:56-07:00"
   xmp:CreatorTool="MATLAB, The Mathworks, Inc. Version 9.7.0.1216025 (R2019b) Update 1. Operating System: Mac OS X"
   xmp:ModifyDate="2020-09-15T11:48:56-07:00"
   pdf:Producer="Acrobat Distiller 20.0 (Macintosh)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:0810e1ba-4403-5a46-8e4e-bbbd7e600bad"
   xmpMM:InstanceID="uuid:e7c6bcbc-5f2c-d245-a372-b4f2bfac3ebe">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">./HBFcomparison.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -420 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 420 li
560 420 li
560 0 li
cp
clp
.06 419.94 mo
560 419.94 li
560 0 li
.06 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
.06 419.94 mo
560 419.94 li
560 0 li
.06 0 li
cp
f
73 175 mo
507 175 li
507 31.5 li
73 31.5 li
cp
f
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
73 175 mo
73 31.5 li
1 /0 /CSD get_res sepcs
.127 sep
@
116.4 175 mo
116.4 31.5 li
@
159.8 175 mo
159.8 31.5 li
@
203.2 175 mo
203.2 31.5 li
@
246.6 175 mo
246.6 31.5 li
@
290 175 mo
290 31.5 li
@
333.4 175 mo
333.4 31.5 li
@
376.8 175 mo
376.8 31.5 li
@
420.2 175 mo
420.2 31.5 li
@
463.6 175 mo
463.6 31.5 li
@
507 175 mo
507 31.5 li
@
507 175 mo
73 175 li
@
507 132.794 mo
73 132.794 li
@
507 90.588 mo
73 90.588 li
@
507 48.382 mo
73 48.382 li
@
2 lc
73 175 mo
507 175 li
1 /0 /CSD get_res sepcs
.851 sep
@
73 31.5 mo
507 31.5 li
@
73 175 mo
73 170.66 li
@
116.4 175 mo
116.4 170.66 li
@
159.8 175 mo
159.8 170.66 li
@
203.2 175 mo
203.2 170.66 li
@
246.6 175 mo
246.6 170.66 li
@
290 175 mo
290 170.66 li
@
333.4 175 mo
333.4 170.66 li
@
376.8 175 mo
376.8 170.66 li
@
420.2 175 mo
420.2 170.66 li
@
463.6 175 mo
463.6 170.66 li
@
507 175 mo
507 170.66 li
@
73 31.5 mo
73 35.84 li
@
116.4 31.5 mo
116.4 35.84 li
@
159.8 31.5 mo
159.8 35.84 li
@
203.2 31.5 mo
203.2 35.84 li
@
246.6 31.5 mo
246.6 35.84 li
@
290 31.5 mo
290 35.84 li
@
333.4 31.5 mo
333.4 35.84 li
@
376.8 31.5 mo
376.8 35.84 li
@
420.2 31.5 mo
420.2 35.84 li
@
463.6 31.5 mo
463.6 35.84 li
@
507 31.5 mo
507 35.84 li
@
%ADOBeginSubsetFont: BBAAAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /BBAAAA+Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f321047244e000000cc000000606376
7420982241db0000012c0000038c6670676d52c5ad27000004b800000b90
676c79667bbdf9f400005d5800000a54686561649b207bba000010480000
0036686865610a220fe40000108000000024686d747845be3289000010a4
000023306c6f63610059eff0000033d4000023346d61787011400c7d0000
5708000000206e616d6538f4164600005728000001be70726570c412718a
000058e80000046e67646972000000000000000000000000000303880190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a002a0093007600a000ac00b800ab00c50000002bfe55001a
042f002105be002740292a292827262524232221201f1e1d1c1b1a191817
161514131211100d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b000
43617d6818b0004360442d2c45b01a234445b01923442d2c2045b0032545
6164b050515845441b2121592d2c20b0032552582359212d2c69b04061b0
008b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0
112bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb01745
8cb0172344b0177ae5182d2cb002254661658a46b040608b482d2cb00225
46608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b003
2545b019236a4445b01a23444565234520b00325606a20b009234223688a
6a606120b0005258b21a401a4523614459b0005058b21940194523614459
2d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7
830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c456920b00943b0022660b00325b00525
4961b0805358b21940194523616844b21a401a4523606a44b209191a4565
2345604259b00943608a103a2d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2c764520b003
254523616818236860442d2c7645b00325452361682318456860442d2c76
45b0032545616823452361442d2c4569b014b0324b505821b0205961442d
b8002b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db8002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db8002f2c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db800302c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db800312c2020456944
b001602020457d691844b001602db800322cb800312a2db800332c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db800342c4b535845441b2121592db800352c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800362c20
20456944b001602db800372cb800362a212db800382c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800392c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db8003b2c2020456944b00160202045
7d691844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db800402c2020456944b001
602db800412cb800402a212db800422c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db800432c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db800442c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db800452c2020456944b001602020457d691844b001
602db800462cb800452a2db800472c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
482c4b535845441b2121592db800492c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db8004a2c2020456944b001602db8004b2c
b8004a2a212db8004c2c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db8004d2c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db8004f2c2020456944b001602020457d691844b001602db800502c
b8004f2a2db800512c4b20b003265358b0801bb040598a8a20b003265358
2321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b003
2653582321b801408a8a1b8a235920b80003265358b0032545b801805058
2321b8018023211bb003254523212321591b2159442db800522c4b535845
441b2121592db800532c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db800542c2020456944b001602db800552cb800542a212d
b800562c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db800572c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800582c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80059
2c2020456944b001602020457d691844b001602db8005a2cb800592a2db8
005b2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a
1b8a235920b0032653582321b800c08a8a1b8a235920b0032653582321b8
01008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8000326
5358b0032545b8018050582321b8018023211bb003254523212321591b21
59442db8005c2c4b535845441b2121592db8005d2c4bb800095058b10101
8e59b801ff85b800441db9000900035f5e2db8005e2c2020456944b00160
2db8005f2cb8005e2a212db800602c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db800612c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b800622c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db800632c2020456944b001602020457d691844b00160
2db800642cb800632a2db800652c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db800662c4b535845441b2121592d0001
0000000000001b0d38105f0f3cf500110800000000005f4d8f0000000000
d8b9a29bf865fc270b9108f9000000090001000100000000000100000629
fe2900000c01f865fced0b910001000000000000000000000000000008cc
05120042000000000239000002390000023900ed02d70052047300000473
0040071d0042055600590187009c02aa008e02aa0044031d004e04ac005c
023900aa02aa0055023900af0239000004730040047300c4047300400473
003104730034047300420473004d0473004b0473004204730049023900e3
023900e304ac001c04ac005c04ac001c0473009c081f00e10556001e0556
009705c7005a05c700a5055600af04e300af0639006305c700a1023900c9
040000230556009c0473009c06aa009705c7009c06390050055600af0639
005005c700b40556006004e3002105c700aa05560034078d00250556002a
0556002a04e3002f023900800239ffbb0239002f03c100780473000002aa
002604730052047300760400003b04730038047300480239001c0473003d
0473008401c7008401c7ffda0400008001c7008906aa0084047300840473
003b047300760473003c02aa00890400004202390017047300800400000b
05c700120400000b040000150400003402acffd50214009002ac002a04ac
00120556001e0556001e05c7005a055600af05c7009c0639005005c700aa
0473005204730052047300520473005204730052047300520400003b0473
004804730048047300480473004802390067023900080239000002390025
047300840473003b0473003b0473003b0473003b0473003b047300800473
00800473008004730080047300500333006f04730068047300380473004b
02cd0095044cfff504e300c705e5001505e50012080000ed02aa008a02aa
00520464005c080000100639004205b4002a0464005c0464005a0464005c
0473ffe1049cffb403f4006a05b400280696001c0464002f0231ff7902f6
003b02ec00310625005e071d004904e3005c04e300ba02aa00e804ac005c
0464ffef047300280464005c04e50071047300c2047300c2080000ed0239
00000556001e0556001e0639005008000049078d00470473fffb080000f1
02aa004e02aa004e01c7008401c700aa0464005c03f40042040000150556
002a0156feaa05f4006002aa00b402aa00aa0400001c0400001c04730050
0239009701c700aa02aa004e0800000e0556001e055600af0556001e0556
00af055600af0239006b0239fff902390020023900020639005006390050
065200690639005005c700aa05c700aa05c700aa023900bd02aa002a02aa
fff702aa001502aa001902aa00f702aa008402aa007902aaffff02aa00a1
02aa002a0473ffe801c7ffd7055600600400004204e3002f040000340214
009005c700210473003d0556002a04000015055600800473008004ac005c
04ac007402aa005702aa000b02aa000706ac005a06ac00a306ac004b0473
0000063900630473003d023900c9055600600400004205c7005a0400003b
05c7005a0400003b047300380556001e047300520556001e047300520556
001e0473005205c7005a0400003b05c7005a0400003b05c700a505480038
055600af04730048055600af04730048055600af04730048055600af0473
0048055600af04730048063900630473003d063900630473003d06390063
0473003d0473003d05c700a10473008405c700350473003e038f00690371
004403330059031f00650239003501c7ffdf063900c9038e008404000023
01c7ffa3055600320400fff10473009c021f00830473009c01c7000c0473
009c021a004e0473009c027b008905c7009c0473008405c7002a0473000a
05c7009c047300840473000e063900500473003b063900500473003b0639
00500473003b05c700b402aa008905c7004902aa001705c700b402aa0042
0556006004000042055600600400004204e300210239001704e3002102e1
001704e30021028fffe205c700aa0473008005c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa04730080078d
002505c700120556002a0400001504e3002f0400003404e3002f04000034
055600600400004204e30021023900170473004b0000fcfc0000fcfc0000
fc9c0000fc680000fc860000fc8a0000fd690000fcc40000fcf60000fc70
0000fc9c0000fd5b0000fcea0000fd120000fc9105c70021063900630473
003d0473009c01c700890556009c0400008005c7009c0473008405c700b4
02aa008901aaffdb023700e102aa005501c7ffda040000800239001c0473
0048047300480400003a047300510000fd3c0000fc660000fc8a0239fffb
0239fffb05c7009c047300840000fcc4056d0024054c0098055600980427
0098059c00250556009807f0000a0554004505c7009805c7009805560098
057e002506aa009805c700980639005005c700980556009805c7005004e3
001d0556002f06d800410556002505db009805360060078d009807a10098
06aa001d070900980536009805c700640800009805b7006a047300560473
0048046200870339008704d9001c04730050063d00170400003304ab0087
04ab0087046200870498001b055400870473008704730048047300870473
007d04000048040000330400001706a800460400001404910087044e005c
063900870657008704e3001b05c7008703ff00870414002f063900870477
005005560098047300500427009803390087023900ba01c7008704000023
05c70050040000480239001d020300290800002506c3001b07e10098067c
008701c7ffdd055600620639004e0473001b055600980462008704000048
0617001b0473001b0556002f0400001705c700980473008704730098031d
00870000fd5b0000fd5b0000fd5b0000fd5b0000fc700000fd930000fd2a
0000fc8a0000fcfc0000fcfc0000fc860000fd690000fcc40000fcf60000
fd930000fc9c0000fc9c0000fc8a0000fc8a0000fc680000fc860000fc66
0000fc680000fc860000fc660000fc660000fd500000fc660000fd5b0000
fc8a0000fc8d0000fd2a000000000239001b0473008306aa008302aa0088
06aa008302aa008902aa0088042b0052042b005302020087033afffd0239
0017023900170400000a05c70011040000140473009c0473009d0473009c
0400008004b2003904b2003905c7005905c7002104890049055600af0556
0060040000420498003906e600aa05950080060a0052021400b6037300b6
023900c3048c002b0400003b0134005102aa00c102aa00c20b06000e0556
00ed029600ed02aa004e01c700aa02aa0055044cfff5042f00c1042f00c2
056500c1056500c202aa0055029600ed02aa0055080000f102d500a4011d
000000000000000000000000000000000000000000000000000000000000
023900000239000002390000023900000239000002390000023900000239
0000023900000000000000000000000000000000000000000000011d0000
008f000002aafff7037000b60473009c02aa005502aa0006044c0072044c
00730556001e04e300ae04730048071c00500568003b0000fd5e0000fd5e
0000fd5e0000fd5e0000fcc90000fcd20000fd980000fccd0000fcef0000
fce10000fcd90000fcec0000fc5e0000fd440000fd4a0000fccf0000fcd1
0000fc860000fc910000fcc10000fcc10000fcc10000fcc20000fcc20000
fc8a01550061027b00610155006101550061046400320464002b03f4002d
03f4002f05b4011305b400280231006b0231fe830464ff330464ffef0464
002b0464002d08fa006f0816006f0556009c023900c9047200c906ab00c9
078f00c905560034078f003409c800340c010034078f00c90556002a078f
002a09c8002a0473009c05c7005a05c700a506aa009701c70084038e0084
0555008405c700840400000b05c7000b078e000b0955000b05c700840400
000b05c7000b078e000b01c700890400003b0473003806aa008409e20074
08c1004f07db003807da006b05a7007102f7005808e7007106f0006b05a1
00530556001e047300520239001e0239ffff063900500473003b05c700aa
0473008005c700aa0473008005c700aa0473008005c700aa0473008005c7
00aa047300800556001e047300520556001e0473005208000010071d0049
063900630473003d0556009c04000080063900500473003b063900500473
003b01c7ffbe09cd005408fc006f07fb00380639006305c7009c04730084
0556001e0473005208000010071d00490639004204e3005c0556001e0473
00520556001e04730052055600af04730048055600af047300480239ff71
01c7ff350239fff801c7ffaa063900500473003b063900500473003b05c7
00b402aaffd605c700b402aa004f05c700aa0473008005c700aa04730080
05c700a1047300840556001e04730052055600af04730048063900500473
003b063900500473003b063900500473003b063900500473003b0556002a
0400001502aa004e023900c90556001e0473005205560097047300760556
009704730076055600970473007605c7005a0400003b05c700a504730038
05c700a50473003805c700a50473003805c700a50473003805c700a50473
0038055600af04730048055600af04730048055600af04730048055600af
04730048055600af0473004804e300af0239001c063900630473003d05c7
00a10473008405c700a10473008405c700a10473008405c700390473001b
05c700a1047300840239ffec01c7ff9e02390027023900160556009c0400
00800556009c040000800556009c040000800473009c01c700890473009c
01c7ff9d0473009c01c7ffb50473009c01c7ffc006aa009706aa008406aa
009706aa008406aa009706aa008405c7009c0473008405c7009c04730084
05c7009c0473008405c7009c04730084063900500473003b063900500473
003b063900500473003b063900500473003b055600af04730076055600af
0473007605c700b402aa008905c700b402aa008305c700b402aa004a05c7
00b402aa0018055600600400004205560060040000420556006004000042
0556006004000042055600600400004204e300210239001704e300210239
001704e300210239ffe204e300210239ffe705c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa047300800556
00340400000b055600340400000b078d002505c70012078d002505c70012
078d002505c70012078d002505c70012078d002505c700120556002a0400
000b0556002a0400000b0556002a0400001504e3002f0400003404e3002f
0400003404e3002f04000034047300840239001005c70012040000150239
001c0556001e047300520556001e047300520556001e047300520556001e
0473ffcb0556001e047300520556001e047300520556001e047300520556
001e047300520556001e047300520556001e047300520556001e04730052
0556001e04730052055600af04730048055600af04730048055600af0473
0048055600af047300480556008c0473fff0055600af04730048055600af
04730048055600af04730048023900ae02390099023900c701c700840639
00500473003b063900500473003b063900500473003b063900500473ffd8
063900500473003b063900500473003b063900500473003b071c00500568
003b071c00500568003b071c00500568003b071c00500568003b071c0050
0568003b05c700aa0473008005c700aa0473008006e600aa0595008006e6
00aa0595008006e600aa0595008006e600aa0595008006e600aa05950080
0556002a040000150556002a040000150556002a040000150556002a0400
0015055600af04730048055600af04730048056d007505df009604860052
048600870723000a05890017056d002404860043056d002404860043056d
00750486005208d9001006dd0012054f0043040a003005df009604860087
05df009604860087065500500486005205df006004120037056d00100412
0019056d001004120019056d00100412001905ac005e047a006907480098
0600008d08000010071d004906aa009706aa008405c700b402aa004c0222
ffc50556001b05c700c504e300d505c70029055600c504e3004805c700b0
06390071023900ba055600b00556002f071d00be05c700b004e300620639
007105c700b0055600c504e3005804e1002f0556002905c700500558003d
06a8007f063900640239000a0556002904e3005a04e300b40473001204e3
006804730077038d004a04e3003b04e5008f023900b0047300b004730025
04e300b8047300420400007104e3006f04e300aa0473004c04e3006f0400
003b04e300b805c700770473000e05c7008f0610006a0239000a04e300b8
0239009a0222000b0000fd19023900b0016c0088016c00880000fcfc0000
fcfc016c008802ca001a02b5001a03050088031200880222002e0222002f
031e00880362006f033300880362006f0735007f0625005e0639ffef01c7
008401c700aa047200ed06ac009c06ac00ed04730048047300480556001e
0473005204730052055600af04730048055600af04730048055600af0473
00480239fff00239ffdb01c70079063900500473003b063900500473003b
063900500473003b055600600400004205c700aa047300800400000b06e6
00aa05950080060200610473ffd605c7fff20473008406aa008403f0009c
0460009a03a6005a03e9000c02cf00020448005c06020061047300500655
004e0486004c0639005002aa001e07c6002407c6002408e6ffca0000f920
0000fa0b0000fa0b0000fa060000fa0606020061047300500655004e0486
004c0222002f02b5001a0473002504e3002f040000340473003b04d20084
04dc00380473007204bd003804d7003d0473008204d7008202220086078d
00470387008802aa008604d2003c04b80032052b00320772003805600017
043a001705ce001c04c2008904b8008901a9008a01a9008a01c700aa0187
007802aa000802aa00c102aa003a0187007802aa000802aa00c102aa003a
01a9008a01a9008a02aa001e02aafff7023a0042023a004100e4ffed0155
00450155004401c4004402e400090200000b023a004e023a004f0256000e
0256000e025600240256002402aa00550256002e0256002e0256002e0200
00210200000600e300440256003a023a000902560024025600240256000e
0256000e02aa0078023a004f0000fccd0000fca20000fca20000fd6f0000
fd6f0000fc490000fc490000fb9e0000fca20000fc490000fccd0000fcc2
0000fcc20000000002390000000000000000000000000000031d004e031d
004e06da00c107c60024023900e308e6009c07c60024071d00d00703001b
023900800239008000000000000000000000000000000000000000000000
0000067b003a023a00200239001a02390021023a002702390025023a0021
023900240256002e0155002b0256002e0155004701550022023a0042023a
0020023a006202390020023900180239001a02390021023a002702390025
023a0021023900240256002e0155002b0256002e0155004701550022063c
0011063900630473009c0473009c0556002a06ab00280600003007560011
0473007207c8005806ac005a05c7005a0556005904e500710696001c06ab
003406ab0028055600af04730076055600af0473007604e3000206390050
04c400a1024100230369001105c7005002bb0023033afffd0473009c0473
009c01c7002a01c7002a0473003d04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a05c1005b05b3005b076c00880776
008807760088078d008807ca006f07a0006f047300770473007704730077
04730077047300770473007706c2008806c200880874008808890088085b
00880868008804e3003b04e3003b04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b073300880733008808e5008808fa008808cc008808d9
00880929006f0929006f023900b0023900b002390041023900390239003d
0239003d023900230239002303a5008803a5008805570088056c0088053e
0088054b0088059b006f059b006f04e3006f04e3006f04e3006f04e3006f
04e3006f04e3006f07a5008807a5008809570088096c0088093e0088094b
008804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b806c20088088900880868008808b8006f0610006a0610006a0610
006a0610006a0610006a0610006a0610006a0610006a0791008807910088
0943008809580088092a0088093700880987006f0987006f04e3005a04e3
005a047300770473007704e3003b04e3003b023900b0023900b004e3006f
04e3006f04e300b804e300b80610006a0610006a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a0811005b080c005b
0991008809d80088097f0088099b008809d3006f09ce006f04e3003b04e3
003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b096c0088
096c00880b1e00880b3300880b0500880b1200880b62006f0b62006f0610
006a0610006a0610006a0610006a0610006a0610006a0610006a0610006a
09ca008809ca00880b7c00880b9100880b6300880b7000880bc0006f0bc0
006f04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
0556001b0556001b0666002e0661002f07a9001b04e3003b04e3003b04e3
003b04e3003b04e3003b06ac002e06a7002f06d2002e06ba002f083100b0
0239ffcf0239ffce0239ffcc0239ffda0239ffdc0239ffc50239ffe10239
ffee0343002e0348002f04e300b804e300b804e300b804e300b804e300aa
04e300aa04e300b804e300b8055600290556002906b1002e0713002f06c2
00880610006a0610006a0610006a0610006a0610006a075a002e0789002f
0792002e07a9002f0878005e04e3005a0473007704e3003b023900b004e3
006f04e300b80610006a05d5007206a7002f06ba002f0348002f0789002f
0713002f07a9002f0239ffcb04e300b804ac002504ea011704f700a102f3
001b02bb00230473002504e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a0239ffd70239ffe40239ffd20239ffd7
0239ffdb0239ffdb0239ffcd0239ffe00239ffc80239ffc30239ffdc0239
ffdc0239ffd70239ffd70239ffd20239ffcd0239ffd20239ffd704e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b80666002e0661002f05c1005b076c00880776008805b3
005b07760088078d00880666002e0661002f05c1005b076c008807760088
05b3005b07760088078d00880343002e0348002f0348002f03a500880557
0088053e008803a50088056c0088054b00880343002e0348002f0348002f
03a5008805570088053e008803a50088056c0088054b008806b1002e0713
002f0713002f06c20088088900880868008806c200880889008808680088
06b1002e0713002f0713002f06c20088088900880868008806c200880889
00880868008805c700b405c7005a0639005001c70020051d0029055600af
05c700a10000fd31055200680473003806390050047300480772005b0738
004505e5001306ac003d06ac003d06ac003a06ac003a066d001d04e3001b
082200d005e1008a06a8007f05c7008f0556001e0400000b079900d005cf
008a04da003802ca002405d900160588003805c700b404730052031f0000
04da00a103eb00a1064900a104cf00840556009c0400008004e3002f0400
003408d9001406dd0030054f0072040a0047056d00a50412007a05df00ac
0486009105df00630412003f04f8002b0412003a056d002e0412002405ac
00ac047a007705ac00ac047a00770556002a0556002a04d900bc037c0091
05ac00ac047a0077063200a504df007a075f00ac059b00910556002a0556
002a06fe0028054e00350748003a059400260748003a0594002607720048
05b3003805df00ac0486009104730052054f00ac054f00ac06a8007f04dc
005d0855004405e0002605560025040000040556003404b6000b0400003b
054f0072040a004705f10026049c0024023900bd056d002e041200240556
00340556001e05c7005a0400003b0473ffe804e3002101c7003e02bb0023
04e30021055600af0473009c0473009c055600af047300480456002301c7
ffda05c700aa01a9002101a9002102aa003302aa003302aa003a02aaffe9
023900e302aa003c02aa003c057f005b04ac002504ac0074023900e304ac
0025057c004c04ac0074023900e3023900e3063900710412003f0412003f
055600ae0473008005c7005a06aa009705dd0097059b004605c7005a05c7
005a05c7005a0400003b0400003b0400003b0473003805ca003006c6002e
063f002f031f001a062e001904e900310488004502aa00be02aa00be02aa
00be02aa00be0277003b0277003b034b0000034b0000034b0000034b0000
034b00000487001203f7001e045e0054043600830436008302fd005d034f
0012069900390655003e052900300000f86506e1002204e9002001e0004b
01e9004b015d0025015d000a0199002a0198001202fb0017030400170267
0013025700120257001202c8004b01d8000701d8000707e9003a097c004b
0931004909310002013c004b04570022058900050589000d04be00150442
001801d8000701d8000703fe003d03fe003d0404003a036f000b0467003c
0000fb760000fcc10000fc080000fc730000fc730000fa630000fce00000
fe950000fc8e0000fc510000fa0b0000fc9f046500360465002204010034
0401002407760017044c001b03ea001d051a00340653003204c8003306c2
008808890088086800880556001b0556001b0239ffdf0239ffe105560029
055600290404001505e5001405e5001405e500140800ffeb0800ffeb0800
03b40800038c080003b40800038c0800ffe90800ffe9080003b40800038c
0800ffe90800ffe9080000000404001500e40042023a0029023a0024023a
001e02000006023a002405c7005a0639006305c7005a0471002205520029
04e300210556001e04d0002805c2004e04d9004e05c7005a06aa008405d0
003106640037082d00350552006805520068039c003f0380003b039c003f
0380003b039c00530381003c039c00530381003c02eb005302e3005302e3
005302e3005302eb005302eb000802e3000002e3000002e3000002eb0008
0363005303630053036300530363005303630053027f00010330004503b2
002603c3000b050b0031069c00290390007f0000fc4f0000fc4f0000fc42
0000fc420000fc420000fc420000fc010000fc010000fd44046500220401
00240a3900500873003b0436008304360083043600830329003a0329003a
03550028050d00340329005403290028032900330329003302f6003a02f6
003a0329002b0143005e02d7005b04bb005e0329005e0329002a02d70029
032900270329002a03290054019400100329005b0373003704bb005e02d7
0008037800800329000d0378004a04dc004d0632002a04be003304730039
0473003b04e6003804e1003a04fa0039076e003e0329000a0143005e01e4
00610329005b02d70008037800800329000d037800790329000a042b0052
05c5001001c70084045e0054070a002e06cb003504d6001b04fa001a02d8
000d04e9001b0330000d02d9000a02db000c01c700aa02aa004e01c700aa
02aa004e01c700aa02aa004e01c700aa02aa004e053d007a0708003b0310
008f0574009708c000220473004002e00034047300400473003104730034
047300420473004d0430002b047300420473004903cc000903cc000903cc
0009042800580425004e048d00560437003d06a600560450004804460048
04f8001f06c70056044e0056042d003d07c7005a049c0056049e007505e3
00560446003f0475005205e9005c046a0075054e00560475003106660056
0448003b05e300560468005604a400560487007504b40058049a005604a4
007504d1003d049a007504250044043d003d04be0056043d004e0458004e
0458004e04ba005605df0056044c00aa04d500b10473005e0473002f0425
00330473007b0437003d04250056049e0050048b003d04b8005604b80056
072b005204a20048048f004804db001f074c007104c10071047d003d085c
005604dd005604dd007b06a20071046f003d04b4004e0619005604ba0085
05d5005604ee0056068b004804a80048063f005204cd005604dd005604c3
007b053b005604e7005604e70085051d005604e70085049600480493003d
0521004e04c50056049300480491004804e7005606060056049c004804c3
007b049c004804ae00560527004c02f6007b044e0056048d005604c50056
05ae005605ee006f000000000000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c000000a8000000a8000000a80000
0184000001d0000002e800000440000004dc0000060400000730000007c4
0000092800000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a5400000a5400000a540000
0a5400000a5400000a5400000a5400000a5400000a5400000a5400000a54
00000a5400000a5400000a5400000a5400000a540001000008cc006f0009
006b00070002001000100067000007e80b90000400010000000a007e0001
000000000000005000000001000000000003001000500001000000000004
001000600001000000000006001000700001000000000007003200800003
000104090001002000b20003000104090002000e00d20003000104090003
002000e0000300010409000400200100000300010409000600200120a920
313939302d32303036204170706c6520436f6d707574657220496e632e20
a92031393831204c696e6f7479706520414720a920313939302d39312054
79706520536f6c7574696f6e7320496e632e414141504c4d2b48656c7665
74696361414141504c4d2b48656c766574696361414141504c4d2b48656c
76657469636148656c766574696361206973206120726567697374657265
642074726164656d61726b206f66204c696e6f7479706520414700410041
00410050004c004d002b00480065006c0076006500740069006300610052
006500670075006c006100720041004100410050004c004d002b00480065
006c0076006500740069006300610041004100410050004c004d002b0048
0065006c0076006500740069006300610041004100410050004c004d002b
00480065006c0076006500740069006300610000b8005d2b01ba000501b9
005f2b01bf01bb003e00340029001d0012000000652bbf01bc0042003400
29001d0012000000652bbf01bd003a00340029001d0012000000652b00bf
01b7004d003d003700280012000000652bbf01b80060004f00370028001b
000000652bbf01b90047003d0029001d0012000000652bbf01ba00420034
0029001d0012000000652b00ba01be000400642bb801b620457d691844b8
00532bb800492bb8003f2bb800352bb8002b2b4118008001a6009001a600
a001a600030069018b0079018b0089018b0099018b00040089018b009901
8b00a9018b00b9018bb2040840ba0179001a014a400b041f5414191f180a
0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a001
9f0064001f01a50025017a00480028019ab3296c1f60410a01a9007001a9
008001a90003008001a9000101a9b21e321fbe012c00250401001f012600
1e0401b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f
1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c
1f931eb8019ab21f921db80101b21f911db80101b21f751db80201b61f6d
29961f6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f35
1de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb801
2540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2
254a1fba019b0025017ab349293896b8017bb348283125b8017a40364828
9629482725294c1f252946272729482756c80784075b07410732072b0728
07260721071b071408120810080e080c080a08080807b801acb23f1f06bb
01ab003f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb7
0804080208000814b8ffe0b40000010014b801abb41000000100b801abb6
06100000010006b801adb300000100b801ad401f04000001000410000001
001002000001000200000001000002010802004a00b0018db80600851676
3f183f123e113946443e113946443e113946443e113946443e113946443e
11394660443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b53
58b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b3
76706a66456523456023456560234560b08b766818b080622020b16a7045
65234520b003266062636820b003266165b070236544b06a234420b17666
4565234520b003266062636820b003266165b066236544b0762344b10066
455458b166406544b27640764523614459b36242725d4565234560234565
60234560b089766818b080622020b172424565234520b003266062636820
b003266165b042236544b072234420b1625d4565234520b0032660626368
20b003266165b05d236544b0622344b1005d455458b15d406544b2624062
45236144592b2b2b2b456953427374b8019a2045694b20b02853b049515a
58b020615944b801a62045694475000000>
[2645 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 168 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>BBAAAA+Helvetica AddT42Char 
1 388 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>BBAAAA+Helvetica AddT42Char 
1 464 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>BBAAAA+Helvetica AddT42Char 
1 744 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>BBAAAA+Helvetica AddT42Char 
1 1088 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>BBAAAA+Helvetica AddT42Char 
1 1244 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>BBAAAA+Helvetica AddT42Char 
1 1540 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>BBAAAA+Helvetica AddT42Char 
1 1840 26 <0001004b0000042f0580000f00534036050b1902380b3a0c390d4a0d5502
56046202b7070a7c0db40dc50d030209010d0e3a000f04090c020d080000
6f0e083809ac0e1147101076c418d4f4ed10e511123939003f3f3cfd3c39
1239015d31305d01150602070607060723121336372135042f45e558572d
1d2ec744e88997fce805809d43feb4c0bb9a63dc019a0196eeadb500>BBAAAA+Helvetica AddT42Char 
1 1988 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>BBAAAA+Helvetica AddT42Char 
1 2344 28 <00020049ffd80411059a001b002700ab402e19052b052816480658056805
8919881a981a09460807212727350a0a182135100504351bc7180d07023c
071e3114b80155400b0d00291b8124380d2947281076c418d4edf4ed10f5
fd397d4b52787a2f18003feded3fed12392fed1112393130437940341f26
191a0b13010312250226220f24280020111e28010319002800260b242800
230e2128011f13212801011a042800250c2728002b2b2b2b012b2b2b2b2b
2b81818181015d01161716333236130e0123220235341233201316151007
02212226350036353426232206151416330110086b374581b6263cb166cf
f1eee8013977424f83fec7d2da0232b19f7b849b8895015a95391ed70149
5f4d0102cbc30128fee69be9fef9cbfeaedca601268db09e9bb1948ca500
>BBAAAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>BBAAAA+Helvetica AddT42Char 
BBAAAA+Helvetica /CharStrings get begin
/zero 19 def
/one 20 def
/two 21 def
/three 22 def
/four 23 def
/five 24 def
/six 25 def
/seven 26 def
/eight 27 def
/nine 28 def
end
BBAAAA+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
pop
end
%ADOEndSubsetFont
/VJOHKF+Helvetica /BBAAAA+Helvetica findfont ct_VMDictPut/VJOHKF+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 198{/.notdef}rp]VJOHKF+Helvetica nfVJOHKF+Helvetica*1 [10 0 0 -10 0 0 ]msf70 189 mo(0102030405060708090100)[40.398 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 35.337 5.56 5.56 0 ]xsh73 175 mo
73 31.5 li
@
507 175 mo
507 31.5 li
@
73 175 mo
77.34 175 li
@
73 132.794 mo
77.34 132.794 li
@
73 90.588 mo
77.34 90.588 li
@
73 48.382 mo
77.34 48.382 li
@
507 175 mo
502.66 175 li
@
507 132.794 mo
502.66 132.794 li
@
507 90.588 mo
502.66 90.588 li
@
507 48.382 mo
502.66 48.382 li
@
%ADOBeginSubsetFont: BBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VJOHKF+Helvetica gcheck setglobal} if
1 108 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>VJOHKF+Helvetica AddT42Char 
VJOHKF+Helvetica /CharStrings get begin
/hyphen 16 def
end
VJOHKF+Helvetica /Encoding get
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VJOHKF+Helvetica*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 198{/.notdef}rp]VJOHKF+Helvetica nfVJOHKF+Helvetica*1 [10 0 0 -10 0 0 ]msf53 178.5 mo(-10)[3.32993 5.56 0 ]xsh59 136.29 mo(-5)[3.32993 0 ]xsh63 94.08 mo(0)sh63 51.87 mo(5)sh37.732 98.366 mo
37.659 98.366 37.623 98.324 37.623 98.241 cv
37.623 98.189 37.633 98.158 37.654 98.147 cv
37.904 97.71 38.203 97.293 38.552 96.897 cv
38.901 96.502 39.302 96.103 39.755 95.702 cv
40.208 95.301 40.662 94.898 41.115 94.491 cv
41.568 94.085 41.935 93.726 42.216 93.413 cv
42.154 93.413 li
41.956 93.413 41.656 93.345 41.255 93.21 cv
40.854 93.075 40.545 93.007 40.326 93.007 cv
40.076 93.007 39.834 93.062 39.599 93.171 cv
39.365 93.28 39.217 93.444 39.154 93.663 cv
39.143 93.736 39.107 93.772 39.044 93.772 cv
38.873 93.772 li
38.8 93.772 38.763 93.725 38.763 93.632 cv
38.763 93.585 li
38.836 93.314 38.956 93.059 39.123 92.819 cv
39.29 92.58 39.495 92.387 39.74 92.241 cv
39.985 92.095 40.237 92.022 40.498 92.022 cv
40.685 92.022 40.841 92.064 40.966 92.147 cv
41.091 92.23 41.235 92.361 41.396 92.538 cv
41.557 92.715 41.69 92.843 41.794 92.921 cv
41.899 92.999 42.029 93.038 42.185 93.038 cv
42.394 93.038 42.579 92.944 42.74 92.757 cv
42.901 92.57 43.06 92.34 43.216 92.069 cv
43.247 92.038 43.284 92.022 43.326 92.022 cv
43.482 92.022 li
43.513 92.022 43.539 92.033 43.56 92.054 cv
43.581 92.075 43.591 92.106 43.591 92.147 cv
43.591 92.178 43.581 92.21 43.56 92.241 cv
43.31 92.668 43.018 93.069 42.685 93.444 cv
42.352 93.819 41.914 94.252 41.373 94.741 cv
40.831 95.231 40.375 95.643 40.005 95.976 cv
39.636 96.309 39.289 96.653 38.966 97.007 cv
39.039 96.986 39.138 96.976 39.263 96.976 cv
39.492 96.976 39.802 97.041 40.193 97.171 cv
40.584 97.301 40.888 97.366 41.107 97.366 cv
41.336 97.366 41.571 97.317 41.81 97.218 cv
42.049 97.119 42.255 96.978 42.427 96.796 cv
42.599 96.613 42.716 96.402 42.779 96.163 cv
42.8 96.1 42.836 96.069 42.888 96.069 cv
43.06 96.069 li
43.091 96.069 43.117 96.085 43.138 96.116 cv
43.159 96.147 43.169 96.179 43.169 96.21 cv
43.169 96.221 43.169 96.231 43.169 96.241 cv
43.076 96.606 42.922 96.947 42.708 97.265 cv
42.495 97.582 42.232 97.845 41.919 98.054 cv
41.607 98.262 41.274 98.366 40.919 98.366 cv
40.742 98.366 40.591 98.324 40.466 98.241 cv
40.341 98.158 40.196 98.028 40.029 97.851 cv
39.862 97.674 39.727 97.543 39.623 97.46 cv
39.518 97.377 39.393 97.335 39.248 97.335 cv
38.779 97.335 38.362 97.663 37.998 98.319 cv
37.967 98.35 37.935 98.366 37.904 98.366 cv
37.732 98.366 li
f
44.477 100.31 mo
44.477 99.951 li
45.31 99.951 45.727 99.847 45.727 99.638 cv
45.727 94.388 li
45.383 94.555 44.951 94.638 44.43 94.638 cv
44.43 94.294 li
45.243 94.294 45.857 94.081 46.274 93.654 cv
46.414 93.654 li
46.435 93.654 46.456 93.662 46.477 93.677 cv
46.498 93.693 46.508 93.711 46.508 93.732 cv
46.508 99.638 li
46.508 99.847 46.925 99.951 47.758 99.951 cv
47.758 100.31 li
44.477 100.31 li
f
1 lw
0 lc
73 175 mo
73.022 175 li
73.044 174.999 li
76.888 174.425 79.909 151.088 80.574 148.031 cv
80.683 147.346 li
80.791 146.656 li
83.532 128.96 85.704 111.173 88.281 93.452 cv
88.282 93.441 li
88.284 93.431 li
1 /0 /CSD get_res sepcs
.582 sep
@
2 lj
[10 6 ] 0 dsh
73 175 mo
73 175 li
@
1 lj
[] 0 dsh
88.284 93.431 mo
88.289 93.395 li
88.294 93.36 li
88.299 93.325 li
88.305 93.29 li
88.326 93.152 li
88.348 93.021 li
88.689 89.593 90.705 90.833 93.197 90.574 cv
93.414 90.574 li
97.718 90.576 102.021 90.574 106.325 90.575 cv
106.651 90.575 li
115.403 90.576 124.156 90.577 132.908 90.577 cv
133.233 90.577 li
150.919 90.578 168.604 90.579 186.29 90.58 cv
186.615 90.58 li
222.131 90.582 257.646 90.582 293.162 90.584 cv
293.488 90.584 li
364.628 90.585 435.767 90.586 506.907 90.587 cv
507.052 90.587 li
@
2 lj
[10 6 ] 0 dsh
88.284 93.431 mo
88.284 93.431 li
@
1 lj
[] 0 dsh
73 175 mo
73.022 175 li
73.044 174.999 li
73.066 174.998 li
73.088 174.996 li
73.144 174.99 li
73.173 174.985 li
74.093 174.771 75.223 174.124 76.107 173.759 cv
76.297 173.673 li
78.424 172.7 80.558 171.744 82.698 170.799 cv
82.807 170.751 li
82.915 170.704 li
83.024 170.656 li
87.411 168.724 91.825 166.851 96.261 165.035 cv
96.369 164.991 li
96.478 164.946 li
96.586 164.902 li
105.505 161.258 114.516 157.844 123.603 154.643 cv
123.711 154.605 li
123.82 154.567 li
123.928 154.529 li
141.8 148.245 159.957 142.788 178.287 138.009 cv
178.395 137.981 li
178.504 137.952 li
178.612 137.924 li
214.511 128.587 251.056 121.812 287.763 116.562 cv
287.872 116.547 li
287.98 116.531 li
288.089 116.516 li
360.528 106.273 433.879 101.57 506.933 98.372 cv
507.042 98.367 li
507.052 98.366 li
1 /0 /CSD get_res sepcs
.49 sep
@
73 175 mo
73.022 175 li
73.044 174.999 li
73.066 174.998 li
73.088 174.996 li
73.196 174.979 li
73.305 174.948 li
73.413 174.905 li
76.747 172.76 78.899 157.017 79.706 153.302 cv
79.815 152.665 li
79.923 152.021 li
82.376 137.195 84.263 122.26 86.325 107.375 cv
86.433 106.585 li
86.542 105.797 li
86.65 105.01 li
86.759 104.225 li
88.601 91.134 90.413 77.94 93.052 64.983 cv
93.16 64.465 li
93.269 63.952 li
94.223 59.97 96.268 49.195 99.67 46.54 cv
99.779 46.467 li
99.887 46.402 li
99.996 46.344 li
100.104 46.293 li
100.213 46.249 li
105.801 43.721 112.173 75.557 113.341 78.606 cv
113.45 79.026 li
113.558 79.445 li
115.811 86.933 120.201 108.719 126.687 113.375 cv
126.795 113.443 li
126.904 113.506 li
127.012 113.565 li
127.121 113.621 li
127.229 113.672 li
135.954 117.701 143.956 82.443 153.92 78.82 cv
154.029 78.773 li
154.137 78.729 li
163.661 75.443 171.472 94.437 180.937 96.566 cv
181.045 96.598 li
181.154 96.63 li
181.262 96.661 li
181.371 96.69 li
181.479 96.719 li
181.588 96.746 li
190.502 99.017 199.068 88.878 208.279 87.526 cv
208.387 87.506 li
208.496 87.486 li
217.61 85.831 226.225 91.221 235.295 92.112 cv
235.404 92.125 li
235.512 92.138 li
235.621 92.15 li
235.729 92.162 li
244.757 93.199 253.45 90.401 262.42 89.833 cv
262.529 89.825 li
262.637 89.818 li
271.639 89.134 280.466 90.588 289.437 90.952 cv
289.654 90.962 li
289.762 90.966 li
289.871 90.971 li
290.088 90.979 li
290.196 90.984 li
290.305 90.988 li
299.224 91.359 308.087 90.605 316.996 90.403 cv
317.104 90.4 li
317.213 90.398 li
326.119 90.165 335.002 90.547 343.904 90.673 cv
344.012 90.675 li
344.121 90.676 li
344.229 90.678 li
362.218 90.794 380.139 90.318 398.154 90.606 cv
398.262 90.606 li
398.371 90.607 li
398.479 90.607 li
434.573 90.574 470.668 90.591 506.762 90.589 cv
507.052 90.589 li
1 /0 /CSD get_res sepcs
.262 sep
@
362.186 90.672 mo
362.186 91.961 361.142 93.005 359.853 93.005 cv
358.564 93.005 357.52 91.961 357.52 90.672 cv
357.52 89.383 358.564 88.339 359.853 88.339 cv
361.142 88.339 362.186 89.383 362.186 90.672 cv
1 /0 /CSD get_res sepcs
1 sep
f
92.04 90.666 mo
92.04 91.955 90.996 92.999 89.707 92.999 cv
88.418 92.999 87.374 91.955 87.374 90.666 cv
87.374 89.377 88.418 88.333 89.707 88.333 cv
90.996 88.333 92.04 89.377 92.04 90.666 cv
f
314.786 101.018 mo
314.286 101.018 313.872 100.885 313.544 100.619 cv
313.216 100.354 312.961 100.013 312.778 99.596 cv
312.596 99.179 312.469 98.739 312.396 98.275 cv
312.323 97.812 312.286 97.346 312.286 96.877 cv
312.286 96.242 312.411 95.606 312.661 94.971 cv
312.911 94.336 313.273 93.807 313.747 93.385 cv
314.221 92.963 314.786 92.752 315.442 92.752 cv
315.723 92.752 315.981 92.804 316.216 92.908 cv
316.45 93.012 316.635 93.166 316.771 93.369 cv
316.906 93.572 316.974 93.815 316.974 94.096 cv
316.974 94.263 316.919 94.401 316.81 94.51 cv
316.701 94.619 316.563 94.674 316.396 94.674 cv
316.239 94.674 316.104 94.619 315.989 94.51 cv
315.874 94.401 315.817 94.263 315.817 94.096 cv
315.817 93.939 315.874 93.806 315.989 93.697 cv
316.104 93.588 316.239 93.533 316.396 93.533 cv
316.458 93.533 li
316.354 93.387 316.211 93.28 316.028 93.213 cv
315.846 93.145 315.651 93.111 315.442 93.111 cv
315.203 93.111 314.981 93.163 314.778 93.268 cv
314.575 93.372 314.391 93.512 314.224 93.689 cv
314.057 93.866 313.919 94.064 313.81 94.283 cv
313.701 94.502 313.617 94.749 313.56 95.025 cv
313.503 95.301 313.466 95.562 313.45 95.807 cv
313.435 96.052 313.427 96.356 313.427 96.721 cv
313.562 96.388 313.76 96.117 314.021 95.908 cv
314.281 95.7 314.573 95.596 314.896 95.596 cv
315.25 95.596 315.573 95.669 315.864 95.814 cv
316.156 95.96 316.409 96.161 316.622 96.416 cv
316.835 96.671 316.997 96.963 317.107 97.291 cv
317.216 97.619 317.271 97.95 317.271 98.283 cv
317.271 98.752 317.167 99.2 316.958 99.627 cv
316.75 100.054 316.456 100.393 316.075 100.643 cv
315.695 100.893 315.265 101.018 314.786 101.018 cv
cp
314.786 100.627 mo
315.099 100.627 315.349 100.557 315.536 100.416 cv
315.723 100.275 315.861 100.09 315.95 99.861 cv
316.039 99.632 316.093 99.398 316.114 99.158 cv
316.135 98.919 316.146 98.627 316.146 98.283 cv
316.146 97.835 316.122 97.45 316.075 97.127 cv
316.028 96.804 315.911 96.523 315.724 96.283 cv
315.536 96.044 315.244 95.924 314.849 95.924 cv
314.526 95.924 314.26 96.033 314.052 96.252 cv
313.843 96.471 313.69 96.747 313.591 97.08 cv
313.492 97.413 313.442 97.731 313.442 98.033 cv
313.442 98.137 313.447 98.22 313.458 98.283 cv
313.458 98.294 313.458 98.302 313.458 98.307 cv
313.458 98.312 313.453 98.319 313.442 98.33 cv
313.442 98.674 313.479 99.023 313.552 99.377 cv
313.625 99.731 313.76 100.028 313.958 100.268 cv
314.156 100.507 314.432 100.627 314.786 100.627 cv
f
320.786 101.018 mo
320.286 101.018 319.872 100.885 319.544 100.619 cv
319.216 100.354 318.961 100.013 318.778 99.596 cv
318.596 99.179 318.469 98.739 318.396 98.275 cv
318.323 97.812 318.286 97.346 318.286 96.877 cv
318.286 96.242 318.411 95.606 318.661 94.971 cv
318.911 94.336 319.273 93.807 319.747 93.385 cv
320.221 92.963 320.786 92.752 321.442 92.752 cv
321.723 92.752 321.981 92.804 322.216 92.908 cv
322.45 93.012 322.635 93.166 322.771 93.369 cv
322.906 93.572 322.974 93.815 322.974 94.096 cv
322.974 94.263 322.919 94.401 322.81 94.51 cv
322.701 94.619 322.563 94.674 322.396 94.674 cv
322.239 94.674 322.104 94.619 321.989 94.51 cv
321.874 94.401 321.817 94.263 321.817 94.096 cv
321.817 93.939 321.874 93.806 321.989 93.697 cv
322.104 93.588 322.239 93.533 322.396 93.533 cv
322.458 93.533 li
322.354 93.387 322.211 93.28 322.028 93.213 cv
321.846 93.145 321.651 93.111 321.442 93.111 cv
321.203 93.111 320.981 93.163 320.778 93.268 cv
320.575 93.372 320.391 93.512 320.224 93.689 cv
320.057 93.866 319.919 94.064 319.81 94.283 cv
319.701 94.502 319.617 94.749 319.56 95.025 cv
319.503 95.301 319.466 95.562 319.45 95.807 cv
319.435 96.052 319.427 96.356 319.427 96.721 cv
319.562 96.388 319.76 96.117 320.021 95.908 cv
320.281 95.7 320.573 95.596 320.896 95.596 cv
321.25 95.596 321.573 95.669 321.864 95.814 cv
322.156 95.96 322.409 96.161 322.622 96.416 cv
322.835 96.671 322.997 96.963 323.107 97.291 cv
323.216 97.619 323.271 97.95 323.271 98.283 cv
323.271 98.752 323.167 99.2 322.958 99.627 cv
322.75 100.054 322.456 100.393 322.075 100.643 cv
321.695 100.893 321.265 101.018 320.786 101.018 cv
cp
320.786 100.627 mo
321.099 100.627 321.349 100.557 321.536 100.416 cv
321.723 100.275 321.861 100.09 321.95 99.861 cv
322.039 99.632 322.093 99.398 322.114 99.158 cv
322.135 98.919 322.146 98.627 322.146 98.283 cv
322.146 97.835 322.122 97.45 322.075 97.127 cv
322.028 96.804 321.911 96.523 321.724 96.283 cv
321.536 96.044 321.244 95.924 320.849 95.924 cv
320.526 95.924 320.26 96.033 320.052 96.252 cv
319.843 96.471 319.69 96.747 319.591 97.08 cv
319.492 97.413 319.442 97.731 319.442 98.033 cv
319.442 98.137 319.447 98.22 319.458 98.283 cv
319.458 98.294 319.458 98.302 319.458 98.307 cv
319.458 98.312 319.453 98.319 319.442 98.33 cv
319.442 98.674 319.479 99.023 319.552 99.377 cv
319.625 99.731 319.76 100.028 319.958 100.268 cv
320.156 100.507 320.432 100.627 320.786 100.627 cv
f
324.802 100.096 mo
324.802 99.908 324.867 99.752 324.997 99.627 cv
325.128 99.502 325.281 99.439 325.458 99.439 cv
325.562 99.439 325.669 99.468 325.778 99.525 cv
325.888 99.582 325.971 99.663 326.028 99.768 cv
326.085 99.872 326.114 99.981 326.114 100.096 cv
326.114 100.263 326.049 100.414 325.919 100.549 cv
325.789 100.684 325.635 100.752 325.458 100.752 cv
325.281 100.752 325.128 100.684 324.997 100.549 cv
324.867 100.414 324.802 100.263 324.802 100.096 cv
f
330.12 101.018 mo
329.141 101.018 328.474 100.614 328.12 99.807 cv
327.765 99 327.588 98.039 327.588 96.924 cv
327.588 96.226 327.651 95.572 327.776 94.963 cv
327.901 94.354 328.153 93.833 328.534 93.4 cv
328.914 92.968 329.443 92.752 330.12 92.752 cv
330.651 92.752 331.083 92.882 331.416 93.143 cv
331.749 93.403 332.005 93.736 332.182 94.143 cv
332.359 94.549 332.479 94.986 332.541 95.455 cv
332.604 95.924 332.635 96.413 332.635 96.924 cv
332.635 97.611 332.573 98.255 332.448 98.854 cv
332.323 99.453 332.075 99.963 331.706 100.385 cv
331.336 100.807 330.807 101.018 330.12 101.018 cv
cp
330.12 100.705 mo
330.567 100.705 330.901 100.476 331.12 100.018 cv
331.339 99.559 331.474 99.054 331.526 98.502 cv
331.578 97.95 331.604 97.361 331.604 96.736 cv
331.604 96.132 331.578 95.575 331.526 95.064 cv
331.474 94.554 331.339 94.093 331.12 93.682 cv
330.901 93.27 330.567 93.064 330.12 93.064 cv
329.672 93.064 329.339 93.272 329.12 93.689 cv
328.901 94.106 328.765 94.567 328.713 95.072 cv
328.661 95.577 328.635 96.132 328.635 96.736 cv
328.635 97.174 328.645 97.591 328.666 97.986 cv
328.687 98.382 328.745 98.791 328.838 99.213 cv
328.932 99.635 329.083 99.989 329.291 100.275 cv
329.5 100.562 329.776 100.705 330.12 100.705 cv
f
334.479 100.252 mo
334.698 100.502 335.078 100.627 335.62 100.627 cv
335.922 100.627 336.206 100.525 336.471 100.322 cv
336.737 100.119 336.943 99.867 337.088 99.564 cv
337.255 99.221 337.362 98.856 337.409 98.471 cv
337.456 98.086 337.479 97.612 337.479 97.049 cv
337.344 97.372 337.146 97.635 336.885 97.838 cv
336.625 98.041 336.333 98.143 336.01 98.143 cv
335.541 98.143 335.125 98.018 334.76 97.768 cv
334.395 97.518 334.114 97.187 333.916 96.775 cv
333.719 96.364 333.62 95.924 333.62 95.455 cv
333.62 94.976 333.729 94.528 333.948 94.111 cv
334.167 93.694 334.471 93.364 334.862 93.119 cv
335.253 92.874 335.693 92.752 336.182 92.752 cv
336.661 92.752 337.065 92.885 337.393 93.15 cv
337.721 93.416 337.971 93.757 338.143 94.174 cv
338.315 94.591 338.435 95.031 338.502 95.494 cv
338.57 95.957 338.604 96.418 338.604 96.877 cv
338.604 97.492 338.492 98.119 338.268 98.76 cv
338.044 99.401 337.705 99.937 337.252 100.369 cv
336.799 100.802 336.255 101.018 335.62 101.018 cv
335.141 101.018 334.737 100.906 334.409 100.682 cv
334.08 100.458 333.916 100.122 333.916 99.674 cv
333.916 99.507 333.973 99.369 334.088 99.26 cv
334.203 99.151 334.343 99.096 334.51 99.096 cv
334.667 99.096 334.8 99.151 334.909 99.26 cv
335.018 99.369 335.073 99.507 335.073 99.674 cv
335.073 99.83 335.018 99.965 334.909 100.08 cv
334.8 100.195 334.667 100.252 334.51 100.252 cv
334.479 100.252 li
cp
336.057 97.83 mo
336.38 97.83 336.645 97.721 336.854 97.502 cv
337.062 97.283 337.213 97.01 337.307 96.682 cv
337.401 96.353 337.448 96.028 337.448 95.705 cv
337.448 95.424 li
337.448 94.82 337.359 94.283 337.182 93.814 cv
337.005 93.345 336.671 93.111 336.182 93.111 cv
335.859 93.111 335.602 93.179 335.409 93.314 cv
335.216 93.45 335.073 93.632 334.979 93.861 cv
334.885 94.09 334.825 94.338 334.799 94.604 cv
334.773 94.869 334.76 95.153 334.76 95.455 cv
334.76 95.914 334.781 96.302 334.823 96.619 cv
334.864 96.937 334.981 97.218 335.174 97.463 cv
335.367 97.708 335.661 97.83 336.057 97.83 cv
f
340.167 99.393 mo
340.25 99.622 340.375 99.832 340.542 100.025 cv
340.709 100.218 340.909 100.366 341.143 100.471 cv
341.378 100.575 341.62 100.627 341.87 100.627 cv
342.443 100.627 342.838 100.403 343.057 99.955 cv
343.276 99.507 343.385 98.965 343.385 98.33 cv
343.385 98.049 343.382 97.814 343.377 97.627 cv
343.372 97.44 343.344 97.257 343.292 97.08 cv
343.219 96.799 343.091 96.551 342.909 96.338 cv
342.726 96.125 342.5 96.018 342.229 96.018 cv
341.958 96.018 341.727 96.06 341.534 96.143 cv
341.341 96.226 341.185 96.323 341.065 96.432 cv
340.945 96.541 340.838 96.656 340.745 96.775 cv
340.651 96.895 340.588 96.96 340.557 96.971 cv
340.432 96.971 li
340.411 96.971 340.385 96.958 340.354 96.932 cv
340.323 96.906 340.307 96.882 340.307 96.861 cv
340.307 92.846 li
340.307 92.835 340.32 92.817 340.346 92.791 cv
340.372 92.765 340.401 92.752 340.432 92.752 cv
340.463 92.752 li
341.005 93.013 341.578 93.143 342.182 93.143 cv
342.776 93.143 343.349 93.013 343.901 92.752 cv
343.932 92.752 li
343.963 92.752 343.989 92.762 344.01 92.783 cv
344.031 92.804 344.042 92.825 344.042 92.846 cv
344.042 92.971 li
344.042 93.002 344.037 93.018 344.026 93.018 cv
343.745 93.382 343.398 93.666 342.987 93.869 cv
342.576 94.072 342.151 94.174 341.713 94.174 cv
341.39 94.174 341.062 94.132 340.729 94.049 cv
340.729 96.314 li
340.99 96.095 341.224 95.939 341.432 95.846 cv
341.641 95.752 341.912 95.705 342.245 95.705 cv
342.682 95.705 343.075 95.833 343.424 96.088 cv
343.773 96.343 344.042 96.677 344.229 97.088 cv
344.416 97.499 344.51 97.913 344.51 98.33 cv
344.51 98.819 344.393 99.267 344.159 99.674 cv
343.924 100.08 343.604 100.405 343.198 100.65 cv
342.791 100.895 342.349 101.018 341.87 101.018 cv
341.474 101.018 341.112 100.916 340.784 100.713 cv
340.456 100.51 340.195 100.236 340.002 99.893 cv
339.809 99.549 339.713 99.184 339.713 98.799 cv
339.713 98.612 339.773 98.463 339.893 98.354 cv
340.013 98.244 340.161 98.189 340.338 98.189 cv
340.515 98.189 340.661 98.246 340.776 98.361 cv
340.891 98.476 340.948 98.622 340.948 98.799 cv
340.948 98.966 340.891 99.109 340.776 99.229 cv
340.661 99.348 340.515 99.408 340.338 99.408 cv
340.307 99.408 340.274 99.405 340.237 99.4 cv
340.2 99.395 340.177 99.393 340.167 99.393 cv
f
345.713 100.752 mo
345.713 100.424 li
345.713 100.403 345.724 100.382 345.745 100.361 cv
347.604 98.299 li
347.885 97.997 348.115 97.742 348.292 97.533 cv
348.469 97.325 348.643 97.085 348.815 96.814 cv
348.987 96.543 349.122 96.27 349.221 95.994 cv
349.32 95.718 349.37 95.424 349.37 95.111 cv
349.37 94.778 349.31 94.463 349.19 94.166 cv
349.07 93.869 348.89 93.63 348.651 93.447 cv
348.412 93.265 348.12 93.174 347.776 93.174 cv
347.432 93.174 347.119 93.281 346.838 93.494 cv
346.557 93.707 346.36 93.976 346.245 94.299 cv
346.276 94.299 346.323 94.299 346.385 94.299 cv
346.562 94.299 346.713 94.359 346.838 94.479 cv
346.963 94.598 347.026 94.752 347.026 94.939 cv
347.026 95.127 346.963 95.283 346.838 95.408 cv
346.713 95.533 346.562 95.596 346.385 95.596 cv
346.198 95.596 346.039 95.531 345.909 95.4 cv
345.778 95.27 345.713 95.116 345.713 94.939 cv
345.713 94.637 345.77 94.356 345.885 94.096 cv
346 93.835 346.164 93.601 346.377 93.393 cv
346.591 93.184 346.831 93.025 347.096 92.916 cv
347.362 92.807 347.646 92.752 347.948 92.752 cv
348.406 92.752 348.833 92.851 349.229 93.049 cv
349.625 93.247 349.938 93.52 350.167 93.869 cv
350.396 94.218 350.51 94.632 350.51 95.111 cv
350.51 95.455 350.435 95.783 350.284 96.096 cv
350.133 96.408 349.937 96.692 349.698 96.947 cv
349.458 97.202 349.153 97.494 348.784 97.822 cv
348.414 98.15 348.172 98.366 348.057 98.471 cv
346.698 99.783 li
347.838 99.783 li
348.411 99.783 348.888 99.778 349.268 99.768 cv
349.648 99.757 349.849 99.742 349.87 99.721 cv
349.963 99.616 350.062 99.246 350.167 98.611 cv
350.51 98.611 li
350.167 100.752 li
345.713 100.752 li
f
355.526 100.783 mo
355.526 98.83 li
355.526 98.767 355.557 98.736 355.62 98.736 cv
355.776 98.736 li
355.817 98.736 355.849 98.767 355.87 98.83 cv
356.089 99.986 356.625 100.564 357.479 100.564 cv
357.864 100.564 358.185 100.478 358.44 100.307 cv
358.695 100.135 358.823 99.872 358.823 99.518 cv
358.823 99.257 358.721 99.036 358.518 98.854 cv
358.315 98.671 358.078 98.549 357.807 98.486 cv
357.01 98.33 li
356.739 98.267 356.495 98.176 356.276 98.057 cv
356.057 97.937 355.878 97.775 355.737 97.572 cv
355.596 97.369 355.526 97.138 355.526 96.877 cv
355.526 96.523 355.617 96.234 355.799 96.01 cv
355.982 95.786 356.221 95.624 356.518 95.525 cv
356.815 95.426 357.135 95.377 357.479 95.377 cv
357.896 95.377 358.255 95.486 358.557 95.705 cv
358.901 95.408 li
358.901 95.387 358.922 95.377 358.963 95.377 cv
359.042 95.377 li
359.073 95.377 359.096 95.387 359.112 95.408 cv
359.127 95.429 359.135 95.45 359.135 95.471 cv
359.135 97.049 li
359.135 97.122 359.104 97.158 359.042 97.158 cv
358.901 97.158 li
358.828 97.158 358.792 97.122 358.792 97.049 cv
358.792 96.622 358.677 96.283 358.448 96.033 cv
358.219 95.783 357.89 95.658 357.463 95.658 cv
357.109 95.658 356.799 95.723 356.534 95.854 cv
356.268 95.984 356.135 96.21 356.135 96.533 cv
356.135 96.762 356.231 96.947 356.424 97.088 cv
356.617 97.229 356.838 97.33 357.088 97.393 cv
357.901 97.549 li
358.172 97.612 358.427 97.716 358.667 97.861 cv
358.906 98.007 359.094 98.195 359.229 98.424 cv
359.364 98.653 359.432 98.908 359.432 99.189 cv
359.432 99.481 359.383 99.734 359.284 99.947 cv
359.185 100.161 359.047 100.338 358.87 100.479 cv
358.693 100.619 358.484 100.723 358.245 100.791 cv
358.005 100.859 357.75 100.893 357.479 100.893 cv
356.979 100.893 356.552 100.721 356.198 100.377 cv
355.76 100.861 li
355.76 100.882 355.739 100.893 355.698 100.893 cv
355.62 100.893 li
355.557 100.893 355.526 100.856 355.526 100.783 cv
f
90.848 85.424 mo
91.035 85.695 91.288 85.895 91.605 86.026 cv
91.923 86.156 92.264 86.221 92.629 86.221 cv
93.087 86.221 93.415 86.023 93.613 85.627 cv
93.811 85.231 93.91 84.783 93.91 84.283 cv
93.91 84.054 93.889 83.828 93.848 83.604 cv
93.806 83.38 93.736 83.169 93.637 82.971 cv
93.538 82.773 93.405 82.617 93.238 82.502 cv
93.071 82.387 92.863 82.33 92.613 82.33 cv
91.816 82.33 li
91.743 82.33 91.707 82.294 91.707 82.221 cv
91.707 82.112 li
91.707 82.049 91.743 82.018 91.816 82.018 cv
92.473 81.955 li
92.754 81.955 92.989 81.851 93.176 81.643 cv
93.363 81.434 93.501 81.179 93.59 80.877 cv
93.679 80.575 93.723 80.289 93.723 80.018 cv
93.723 79.633 93.632 79.318 93.449 79.073 cv
93.267 78.828 92.994 78.705 92.629 78.705 cv
92.327 78.705 92.035 78.762 91.754 78.877 cv
91.473 78.992 91.254 79.164 91.098 79.393 cv
91.108 79.393 91.118 79.39 91.129 79.385 cv
91.14 79.38 91.155 79.377 91.176 79.377 cv
91.353 79.377 91.501 79.44 91.621 79.565 cv
91.741 79.69 91.801 79.841 91.801 80.018 cv
91.801 80.195 91.741 80.346 91.621 80.471 cv
91.501 80.596 91.353 80.658 91.176 80.658 cv
90.999 80.658 90.848 80.596 90.723 80.471 cv
90.598 80.346 90.535 80.195 90.535 80.018 cv
90.535 79.674 90.639 79.377 90.848 79.127 cv
91.056 78.877 91.322 78.684 91.645 78.549 cv
91.968 78.414 92.296 78.346 92.629 78.346 cv
92.868 78.346 93.124 78.382 93.395 78.455 cv
93.666 78.528 93.91 78.633 94.129 78.768 cv
94.348 78.903 94.525 79.078 94.66 79.291 cv
94.795 79.505 94.863 79.747 94.863 80.018 cv
94.863 80.351 94.79 80.661 94.645 80.948 cv
94.499 81.234 94.293 81.479 94.027 81.682 cv
93.762 81.885 93.473 82.039 93.16 82.143 cv
93.514 82.206 93.847 82.336 94.16 82.533 cv
94.473 82.731 94.723 82.981 94.91 83.283 cv
95.097 83.586 95.191 83.914 95.191 84.268 cv
95.191 84.716 95.071 85.117 94.832 85.471 cv
94.593 85.825 94.275 86.104 93.879 86.307 cv
93.483 86.51 93.066 86.612 92.629 86.612 cv
92.254 86.612 91.876 86.539 91.496 86.393 cv
91.116 86.247 90.806 86.033 90.566 85.752 cv
90.327 85.471 90.207 85.127 90.207 84.721 cv
90.207 84.523 90.275 84.359 90.41 84.229 cv
90.545 84.098 90.712 84.033 90.91 84.033 cv
91.035 84.033 91.153 84.062 91.262 84.119 cv
91.371 84.176 91.457 84.26 91.52 84.369 cv
91.582 84.478 91.613 84.596 91.613 84.721 cv
91.613 84.919 91.543 85.086 91.402 85.221 cv
91.261 85.356 91.097 85.424 90.91 85.424 cv
90.848 85.424 li
f
96.723 85.69 mo
96.723 85.502 96.788 85.346 96.918 85.221 cv
97.048 85.096 97.202 85.033 97.379 85.033 cv
97.483 85.033 97.59 85.062 97.699 85.119 cv
97.808 85.176 97.892 85.257 97.949 85.362 cv
98.006 85.466 98.035 85.575 98.035 85.69 cv
98.035 85.857 97.97 86.008 97.84 86.143 cv
97.71 86.278 97.556 86.346 97.379 86.346 cv
97.202 86.346 97.048 86.278 96.918 86.143 cv
96.788 86.008 96.723 85.857 96.723 85.69 cv
f
99.54 84.518 mo
99.54 84.039 99.699 83.614 100.017 83.244 cv
100.334 82.875 100.743 82.57 101.243 82.33 cv
100.79 82.033 li
100.519 81.856 100.298 81.62 100.126 81.323 cv
99.954 81.026 99.868 80.71 99.868 80.377 cv
99.868 79.992 99.97 79.645 100.173 79.338 cv
100.376 79.031 100.645 78.789 100.978 78.612 cv
101.311 78.435 101.665 78.346 102.04 78.346 cv
102.395 78.346 102.739 78.419 103.072 78.565 cv
103.405 78.71 103.676 78.919 103.884 79.19 cv
104.093 79.461 104.197 79.783 104.197 80.158 cv
104.197 80.419 104.134 80.666 104.009 80.901 cv
103.884 81.135 103.712 81.343 103.493 81.526 cv
103.274 81.708 103.04 81.862 102.79 81.987 cv
103.478 82.424 li
103.791 82.633 104.043 82.906 104.236 83.244 cv
104.429 83.583 104.525 83.934 104.525 84.299 cv
104.525 84.736 104.408 85.132 104.173 85.487 cv
103.939 85.841 103.632 86.117 103.251 86.315 cv
102.871 86.513 102.467 86.612 102.04 86.612 cv
101.623 86.612 101.222 86.529 100.837 86.362 cv
100.452 86.195 100.139 85.95 99.9 85.627 cv
99.66 85.304 99.54 84.935 99.54 84.518 cv
cp
100.197 84.518 mo
100.197 84.841 100.283 85.132 100.454 85.393 cv
100.626 85.653 100.855 85.856 101.142 86.002 cv
101.429 86.148 101.728 86.221 102.04 86.221 cv
102.509 86.221 102.931 86.086 103.306 85.815 cv
103.681 85.544 103.868 85.184 103.868 84.737 cv
103.868 84.591 103.84 84.442 103.783 84.291 cv
103.726 84.14 103.642 84.002 103.533 83.877 cv
103.423 83.752 103.3 83.653 103.165 83.58 cv
101.556 82.533 li
101.306 82.669 101.077 82.838 100.868 83.041 cv
100.66 83.244 100.496 83.471 100.376 83.721 cv
100.257 83.971 100.197 84.237 100.197 84.518 cv
cp
101.025 80.862 mo
102.478 81.799 li
102.811 81.601 103.085 81.364 103.298 81.088 cv
103.511 80.812 103.618 80.502 103.618 80.158 cv
103.618 79.887 103.543 79.64 103.392 79.416 cv
103.241 79.192 103.045 79.018 102.806 78.893 cv
102.567 78.768 102.306 78.705 102.025 78.705 cv
101.785 78.705 101.543 78.752 101.298 78.846 cv
101.053 78.94 100.85 79.078 100.689 79.26 cv
100.528 79.442 100.447 79.658 100.447 79.908 cv
100.447 80.283 100.64 80.601 101.025 80.862 cv
f
105.369 84.362 mo
105.369 83.94 li
109.087 78.408 li
109.108 78.367 109.15 78.346 109.212 78.346 cv
109.384 78.346 li
109.478 78.346 109.525 78.393 109.525 78.487 cv
109.525 83.94 li
110.697 83.94 li
110.697 84.362 li
109.525 84.362 li
109.525 85.549 li
109.525 85.705 109.642 85.807 109.876 85.854 cv
110.111 85.901 110.379 85.924 110.681 85.924 cv
110.681 86.346 li
107.384 86.346 li
107.384 85.924 li
107.686 85.924 107.954 85.901 108.189 85.854 cv
108.423 85.807 108.54 85.705 108.54 85.549 cv
108.54 84.362 li
105.369 84.362 li
cp
105.775 83.94 mo
108.619 83.94 li
108.619 79.69 li
105.775 83.94 li
f
112.4 85.846 mo
112.619 86.096 112.999 86.221 113.54 86.221 cv
113.843 86.221 114.127 86.119 114.392 85.916 cv
114.657 85.713 114.863 85.461 115.009 85.158 cv
115.176 84.815 115.282 84.45 115.329 84.065 cv
115.376 83.68 115.4 83.206 115.4 82.643 cv
115.265 82.966 115.067 83.229 114.806 83.432 cv
114.545 83.635 114.254 83.737 113.931 83.737 cv
113.462 83.737 113.046 83.612 112.681 83.362 cv
112.316 83.112 112.035 82.781 111.837 82.369 cv
111.639 81.958 111.54 81.518 111.54 81.049 cv
111.54 80.57 111.65 80.122 111.869 79.705 cv
112.088 79.288 112.392 78.958 112.783 78.713 cv
113.174 78.468 113.614 78.346 114.103 78.346 cv
114.582 78.346 114.986 78.479 115.314 78.744 cv
115.642 79.01 115.892 79.351 116.064 79.768 cv
116.236 80.185 116.356 80.625 116.423 81.088 cv
116.491 81.551 116.525 82.012 116.525 82.471 cv
116.525 83.086 116.413 83.713 116.189 84.354 cv
115.965 84.995 115.626 85.531 115.173 85.963 cv
114.72 86.396 114.176 86.612 113.54 86.612 cv
113.061 86.612 112.658 86.5 112.329 86.276 cv
112.001 86.052 111.837 85.716 111.837 85.268 cv
111.837 85.101 111.894 84.963 112.009 84.854 cv
112.124 84.745 112.264 84.69 112.431 84.69 cv
112.587 84.69 112.72 84.745 112.829 84.854 cv
112.939 84.963 112.994 85.101 112.994 85.268 cv
112.994 85.424 112.939 85.559 112.829 85.674 cv
112.72 85.789 112.587 85.846 112.431 85.846 cv
112.4 85.846 li
cp
113.978 83.424 mo
114.301 83.424 114.566 83.315 114.775 83.096 cv
114.983 82.877 115.134 82.604 115.228 82.276 cv
115.322 81.947 115.369 81.622 115.369 81.299 cv
115.369 81.018 li
115.369 80.414 115.28 79.877 115.103 79.408 cv
114.926 78.939 114.592 78.705 114.103 78.705 cv
113.78 78.705 113.522 78.773 113.329 78.908 cv
113.136 79.044 112.993 79.226 112.9 79.455 cv
112.806 79.684 112.746 79.932 112.72 80.198 cv
112.694 80.463 112.681 80.747 112.681 81.049 cv
112.681 81.508 112.702 81.896 112.744 82.213 cv
112.785 82.531 112.902 82.812 113.095 83.057 cv
113.288 83.302 113.582 83.424 113.978 83.424 cv
f
120.04 86.612 mo
119.54 86.612 119.126 86.479 118.798 86.213 cv
118.47 85.948 118.215 85.607 118.033 85.19 cv
117.85 84.773 117.723 84.333 117.65 83.869 cv
117.577 83.406 117.54 82.94 117.54 82.471 cv
117.54 81.836 117.665 81.2 117.915 80.565 cv
118.165 79.93 118.527 79.401 119.001 78.979 cv
119.475 78.557 120.04 78.346 120.697 78.346 cv
120.978 78.346 121.236 78.398 121.47 78.502 cv
121.705 78.606 121.89 78.76 122.025 78.963 cv
122.16 79.166 122.228 79.409 122.228 79.69 cv
122.228 79.857 122.173 79.995 122.064 80.104 cv
121.955 80.213 121.817 80.268 121.65 80.268 cv
121.493 80.268 121.358 80.213 121.244 80.104 cv
121.129 79.995 121.072 79.857 121.072 79.69 cv
121.072 79.533 121.129 79.4 121.244 79.291 cv
121.358 79.182 121.493 79.127 121.65 79.127 cv
121.712 79.127 li
121.608 78.981 121.465 78.874 121.283 78.807 cv
121.1 78.739 120.905 78.705 120.697 78.705 cv
120.457 78.705 120.236 78.757 120.033 78.862 cv
119.83 78.966 119.645 79.106 119.478 79.283 cv
119.311 79.46 119.173 79.658 119.064 79.877 cv
118.955 80.096 118.871 80.343 118.814 80.619 cv
118.757 80.895 118.72 81.156 118.704 81.401 cv
118.689 81.646 118.681 81.95 118.681 82.315 cv
118.816 81.982 119.014 81.711 119.275 81.502 cv
119.535 81.294 119.827 81.19 120.15 81.19 cv
120.504 81.19 120.827 81.263 121.119 81.408 cv
121.41 81.554 121.663 81.755 121.876 82.01 cv
122.09 82.265 122.252 82.557 122.361 82.885 cv
122.47 83.213 122.525 83.544 122.525 83.877 cv
122.525 84.346 122.421 84.794 122.212 85.221 cv
122.004 85.648 121.71 85.987 121.329 86.237 cv
120.949 86.487 120.519 86.612 120.04 86.612 cv
cp
120.04 86.221 mo
120.353 86.221 120.603 86.151 120.79 86.01 cv
120.978 85.869 121.116 85.684 121.204 85.455 cv
121.293 85.226 121.348 84.992 121.369 84.752 cv
121.39 84.513 121.4 84.221 121.4 83.877 cv
121.4 83.429 121.376 83.044 121.329 82.721 cv
121.282 82.398 121.165 82.117 120.978 81.877 cv
120.791 81.638 120.499 81.518 120.103 81.518 cv
119.78 81.518 119.515 81.627 119.306 81.846 cv
119.098 82.065 118.944 82.341 118.845 82.674 cv
118.746 83.007 118.697 83.325 118.697 83.627 cv
118.697 83.731 118.702 83.814 118.712 83.877 cv
118.712 83.888 118.712 83.896 118.712 83.901 cv
118.712 83.906 118.707 83.913 118.697 83.924 cv
118.697 84.268 118.733 84.617 118.806 84.971 cv
118.879 85.325 119.014 85.622 119.212 85.862 cv
119.41 86.101 119.686 86.221 120.04 86.221 cv
f
127.447 86.377 mo
127.447 84.424 li
127.447 84.361 127.478 84.33 127.54 84.33 cv
127.697 84.33 li
127.738 84.33 127.769 84.361 127.79 84.424 cv
128.009 85.58 128.546 86.158 129.4 86.158 cv
129.785 86.158 130.106 86.072 130.361 85.901 cv
130.616 85.729 130.744 85.466 130.744 85.112 cv
130.744 84.851 130.642 84.63 130.439 84.448 cv
130.236 84.265 129.999 84.143 129.728 84.08 cv
128.931 83.924 li
128.66 83.861 128.416 83.77 128.197 83.651 cv
127.978 83.531 127.799 83.369 127.658 83.166 cv
127.517 82.963 127.447 82.732 127.447 82.471 cv
127.447 82.117 127.538 81.828 127.72 81.604 cv
127.903 81.38 128.142 81.218 128.439 81.119 cv
128.736 81.02 129.056 80.971 129.4 80.971 cv
129.817 80.971 130.176 81.08 130.478 81.299 cv
130.822 81.002 li
130.822 80.981 130.843 80.971 130.884 80.971 cv
130.962 80.971 li
130.993 80.971 131.017 80.981 131.033 81.002 cv
131.048 81.023 131.056 81.044 131.056 81.065 cv
131.056 82.643 li
131.056 82.716 131.025 82.752 130.962 82.752 cv
130.822 82.752 li
130.749 82.752 130.712 82.716 130.712 82.643 cv
130.712 82.216 130.598 81.877 130.369 81.627 cv
130.14 81.377 129.811 81.252 129.384 81.252 cv
129.03 81.252 128.72 81.317 128.454 81.448 cv
128.189 81.578 128.056 81.804 128.056 82.127 cv
128.056 82.356 128.152 82.541 128.345 82.682 cv
128.538 82.823 128.759 82.924 129.009 82.987 cv
129.822 83.143 li
130.093 83.206 130.348 83.31 130.587 83.455 cv
130.827 83.601 131.015 83.789 131.15 84.018 cv
131.285 84.247 131.353 84.502 131.353 84.783 cv
131.353 85.075 131.303 85.328 131.204 85.541 cv
131.105 85.755 130.967 85.932 130.79 86.073 cv
130.613 86.213 130.405 86.317 130.165 86.385 cv
129.926 86.453 129.671 86.487 129.4 86.487 cv
128.9 86.487 128.473 86.315 128.119 85.971 cv
127.681 86.455 li
127.681 86.476 127.66 86.487 127.619 86.487 cv
127.54 86.487 li
127.478 86.487 127.447 86.45 127.447 86.377 cv
f
73 374 mo
507 374 li
507 230.5 li
73 230.5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
73 374 mo
73 230.5 li
1 /0 /CSD get_res sepcs
.127 sep
@
116.4 374 mo
116.4 230.5 li
@
159.8 374 mo
159.8 230.5 li
@
203.2 374 mo
203.2 230.5 li
@
246.6 374 mo
246.6 230.5 li
@
290 374 mo
290 230.5 li
@
333.4 374 mo
333.4 230.5 li
@
376.8 374 mo
376.8 230.5 li
@
420.2 374 mo
420.2 230.5 li
@
463.6 374 mo
463.6 230.5 li
@
507 374 mo
507 230.5 li
@
507 356.063 mo
73 356.063 li
@
507 320.188 mo
73 320.188 li
@
507 284.313 mo
73 284.313 li
@
507 248.438 mo
73 248.438 li
@
2 lc
73 374 mo
507 374 li
1 /0 /CSD get_res sepcs
.851 sep
@
73 230.5 mo
507 230.5 li
@
73 374 mo
73 369.66 li
@
116.4 374 mo
116.4 369.66 li
@
159.8 374 mo
159.8 369.66 li
@
203.2 374 mo
203.2 369.66 li
@
246.6 374 mo
246.6 369.66 li
@
290 374 mo
290 369.66 li
@
333.4 374 mo
333.4 369.66 li
@
376.8 374 mo
376.8 369.66 li
@
420.2 374 mo
420.2 369.66 li
@
463.6 374 mo
463.6 369.66 li
@
507 374 mo
507 369.66 li
@
73 230.5 mo
73 234.84 li
@
116.4 230.5 mo
116.4 234.84 li
@
159.8 230.5 mo
159.8 234.84 li
@
203.2 230.5 mo
203.2 234.84 li
@
246.6 230.5 mo
246.6 234.84 li
@
290 230.5 mo
290 234.84 li
@
333.4 230.5 mo
333.4 234.84 li
@
376.8 230.5 mo
376.8 234.84 li
@
420.2 230.5 mo
420.2 234.84 li
@
463.6 230.5 mo
463.6 234.84 li
@
507 230.5 mo
507 234.84 li
@
VJOHKF+Helvetica*1 [10 0 0 -10 0 0 ]msf70 388 mo(0102030405060708090100)[40.398 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 37.837 5.56 35.337 5.56 5.56 0 ]xsh280.01 402.119 mo
280.01 401.984 280.021 401.854 280.042 401.729 cv
281.057 397.713 li
279.589 397.713 li
279.495 397.713 279.448 397.651 279.448 397.526 cv
279.479 397.328 279.542 397.229 279.635 397.229 cv
281.182 397.229 li
281.745 394.947 li
281.776 394.822 281.847 394.716 281.956 394.627 cv
282.065 394.538 282.188 394.494 282.323 394.494 cv
282.448 394.494 282.549 394.531 282.628 394.604 cv
282.706 394.677 282.745 394.77 282.745 394.885 cv
282.745 394.916 282.745 394.94 282.745 394.955 cv
282.745 394.971 282.74 394.984 282.729 394.994 cv
282.167 397.229 li
283.62 397.229 li
283.713 397.229 283.76 397.286 283.76 397.401 cv
283.75 397.432 283.74 397.473 283.729 397.526 cv
283.719 397.578 283.701 397.622 283.674 397.658 cv
283.648 397.695 283.614 397.713 283.573 397.713 cv
282.042 397.713 li
281.042 401.76 li
280.979 402.031 280.948 402.26 280.948 402.447 cv
280.948 402.843 281.083 403.041 281.354 403.041 cv
281.761 403.041 282.123 402.848 282.44 402.463 cv
282.758 402.078 283 401.656 283.167 401.197 cv
283.208 401.145 283.245 401.119 283.276 401.119 cv
283.448 401.119 li
283.489 401.119 283.521 401.132 283.542 401.158 cv
283.563 401.184 283.573 401.213 283.573 401.244 cv
283.573 401.265 283.568 401.281 283.557 401.291 cv
283.349 401.854 283.05 402.349 282.659 402.776 cv
282.268 403.203 281.823 403.416 281.323 403.416 cv
280.948 403.416 280.635 403.296 280.385 403.057 cv
280.135 402.817 280.01 402.504 280.01 402.119 cv
f
288.181 406.76 mo
288.181 392.76 li
290.087 392.76 li
290.087 393.322 li
288.743 393.322 li
288.743 406.197 li
290.087 406.197 li
290.087 406.76 li
288.181 406.76 li
f
291.632 402.401 mo
291.882 402.828 292.387 403.041 293.148 403.041 cv
293.471 403.041 293.78 402.986 294.077 402.877 cv
294.374 402.768 294.619 402.601 294.812 402.377 cv
295.005 402.153 295.101 401.88 295.101 401.557 cv
295.101 401.317 295.015 401.122 294.843 400.971 cv
294.671 400.82 294.46 400.713 294.21 400.651 cv
293.444 400.51 li
293.101 400.416 292.817 400.252 292.593 400.018 cv
292.369 399.783 292.257 399.494 292.257 399.151 cv
292.257 398.744 292.369 398.38 292.593 398.057 cv
292.817 397.734 293.114 397.489 293.483 397.322 cv
293.853 397.155 294.236 397.072 294.632 397.072 cv
295.059 397.072 295.44 397.174 295.773 397.377 cv
296.106 397.58 296.273 397.88 296.273 398.276 cv
296.273 398.495 296.213 398.685 296.093 398.846 cv
295.973 399.007 295.809 399.088 295.601 399.088 cv
295.476 399.088 295.369 399.049 295.28 398.971 cv
295.192 398.893 295.148 398.791 295.148 398.666 cv
295.148 398.551 295.179 398.445 295.241 398.346 cv
295.304 398.247 295.384 398.166 295.483 398.104 cv
295.582 398.041 295.689 398.01 295.804 398.01 cv
295.721 397.812 295.567 397.666 295.343 397.572 cv
295.119 397.479 294.877 397.432 294.616 397.432 cv
294.377 397.432 294.137 397.481 293.898 397.58 cv
293.658 397.679 293.468 397.82 293.327 398.002 cv
293.186 398.185 293.116 398.401 293.116 398.651 cv
293.116 398.818 293.176 398.966 293.296 399.096 cv
293.416 399.226 293.559 399.317 293.726 399.369 cv
294.538 399.541 li
294.799 399.593 295.038 399.687 295.257 399.822 cv
295.476 399.958 295.648 400.133 295.773 400.346 cv
295.898 400.559 295.96 400.801 295.96 401.072 cv
295.96 401.427 295.864 401.771 295.671 402.104 cv
295.478 402.437 295.241 402.708 294.96 402.916 cv
294.46 403.249 293.851 403.416 293.132 403.416 cv
292.632 403.416 292.174 403.301 291.757 403.072 cv
291.34 402.843 291.132 402.505 291.132 402.057 cv
291.132 401.796 291.207 401.572 291.358 401.385 cv
291.509 401.198 291.71 401.104 291.96 401.104 cv
292.116 401.104 292.244 401.151 292.343 401.244 cv
292.442 401.338 292.491 401.458 292.491 401.604 cv
292.491 401.823 292.413 402.01 292.257 402.166 cv
292.101 402.323 291.913 402.401 291.694 402.401 cv
291.632 402.401 li
f
297.288 406.76 mo
297.288 406.197 li
298.648 406.197 li
298.648 393.322 li
297.288 393.322 li
297.288 392.76 li
299.21 392.76 li
299.21 406.76 li
297.288 406.76 li
f
73 374 mo
73 230.5 li
@
507 374 mo
507 230.5 li
@
73 356.063 mo
77.34 356.063 li
@
73 320.188 mo
77.34 320.188 li
@
73 284.313 mo
77.34 284.313 li
@
73 248.438 mo
77.34 248.438 li
@
507 356.063 mo
502.66 356.063 li
@
507 320.188 mo
502.66 320.188 li
@
507 284.313 mo
502.66 284.313 li
@
507 248.438 mo
502.66 248.438 li
@
VJOHKF+Helvetica*1 [10 0 0 -10 0 0 ]msf59 359.563 mo(-2)[3.32993 0 ]xsh63 323.682 mo(0)sh63 287.802 mo(2)sh63 251.922 mo(4)sh43.732 297.366 mo
43.659 297.366 43.623 297.324 43.623 297.241 cv
43.623 297.189 43.633 297.158 43.654 297.147 cv
43.904 296.71 44.203 296.293 44.552 295.897 cv
44.901 295.502 45.302 295.103 45.755 294.702 cv
46.208 294.301 46.662 293.898 47.115 293.491 cv
47.568 293.085 47.935 292.726 48.216 292.413 cv
48.154 292.413 li
47.956 292.413 47.656 292.345 47.255 292.21 cv
46.854 292.075 46.545 292.007 46.326 292.007 cv
46.076 292.007 45.834 292.062 45.599 292.171 cv
45.365 292.28 45.217 292.444 45.154 292.663 cv
45.143 292.736 45.107 292.772 45.044 292.772 cv
44.873 292.772 li
44.8 292.772 44.763 292.725 44.763 292.632 cv
44.763 292.585 li
44.836 292.314 44.956 292.059 45.123 291.819 cv
45.29 291.58 45.495 291.387 45.74 291.241 cv
45.985 291.095 46.237 291.022 46.498 291.022 cv
46.685 291.022 46.841 291.064 46.966 291.147 cv
47.091 291.23 47.235 291.361 47.396 291.538 cv
47.557 291.715 47.69 291.843 47.794 291.921 cv
47.899 291.999 48.029 292.038 48.185 292.038 cv
48.394 292.038 48.579 291.944 48.74 291.757 cv
48.901 291.57 49.06 291.34 49.216 291.069 cv
49.247 291.038 49.284 291.022 49.326 291.022 cv
49.482 291.022 li
49.513 291.022 49.539 291.033 49.56 291.054 cv
49.581 291.075 49.591 291.106 49.591 291.147 cv
49.591 291.178 49.581 291.21 49.56 291.241 cv
49.31 291.668 49.018 292.069 48.685 292.444 cv
48.352 292.819 47.914 293.252 47.373 293.741 cv
46.831 294.231 46.375 294.643 46.005 294.976 cv
45.636 295.309 45.289 295.653 44.966 296.007 cv
45.039 295.986 45.138 295.976 45.263 295.976 cv
45.492 295.976 45.802 296.041 46.193 296.171 cv
46.584 296.301 46.888 296.366 47.107 296.366 cv
47.336 296.366 47.571 296.317 47.81 296.218 cv
48.049 296.119 48.255 295.978 48.427 295.796 cv
48.599 295.613 48.716 295.402 48.779 295.163 cv
48.8 295.1 48.836 295.069 48.888 295.069 cv
49.06 295.069 li
49.091 295.069 49.117 295.085 49.138 295.116 cv
49.159 295.147 49.169 295.179 49.169 295.21 cv
49.169 295.221 49.169 295.231 49.169 295.241 cv
49.076 295.606 48.922 295.947 48.708 296.265 cv
48.495 296.582 48.232 296.845 47.919 297.054 cv
47.607 297.262 47.274 297.366 46.919 297.366 cv
46.742 297.366 46.591 297.324 46.466 297.241 cv
46.341 297.158 46.196 297.028 46.029 296.851 cv
45.862 296.674 45.727 296.543 45.623 296.46 cv
45.518 296.377 45.393 296.335 45.248 296.335 cv
44.779 296.335 44.362 296.663 43.998 297.319 cv
43.967 297.35 43.935 297.366 43.904 297.366 cv
43.732 297.366 li
f
50.055 299.31 mo
50.055 299.044 li
50.055 299.023 50.06 299.003 50.071 298.982 cv
51.633 297.263 li
51.862 297.013 52.05 296.802 52.196 296.63 cv
52.341 296.458 52.487 296.26 52.633 296.036 cv
52.779 295.813 52.894 295.584 52.977 295.349 cv
53.06 295.114 53.102 294.867 53.102 294.607 cv
53.102 294.336 53.05 294.076 52.946 293.826 cv
52.841 293.576 52.69 293.375 52.493 293.224 cv
52.295 293.073 52.055 292.997 51.774 292.997 cv
51.482 292.997 51.219 293.086 50.985 293.263 cv
50.75 293.44 50.586 293.664 50.493 293.935 cv
50.524 293.935 50.56 293.935 50.602 293.935 cv
50.758 293.935 50.888 293.984 50.993 294.083 cv
51.097 294.182 51.149 294.31 51.149 294.466 cv
51.149 294.623 51.097 294.753 50.993 294.857 cv
50.888 294.961 50.758 295.013 50.602 295.013 cv
50.446 295.013 50.316 294.958 50.211 294.849 cv
50.107 294.74 50.055 294.612 50.055 294.466 cv
50.055 294.216 50.102 293.982 50.196 293.763 cv
50.289 293.544 50.425 293.349 50.602 293.177 cv
50.779 293.005 50.98 292.875 51.204 292.786 cv
51.427 292.698 51.664 292.654 51.914 292.654 cv
52.3 292.654 52.657 292.735 52.985 292.896 cv
53.313 293.057 53.573 293.284 53.766 293.576 cv
53.959 293.867 54.055 294.211 54.055 294.607 cv
54.055 294.898 53.99 295.174 53.86 295.435 cv
53.729 295.696 53.565 295.933 53.368 296.146 cv
53.17 296.359 52.917 296.601 52.61 296.872 cv
52.303 297.143 52.097 297.321 51.993 297.404 cv
50.868 298.497 li
51.821 298.497 li
52.3 298.497 52.698 298.495 53.016 298.49 cv
53.334 298.485 53.498 298.472 53.508 298.451 cv
53.591 298.368 53.675 298.06 53.758 297.529 cv
54.055 297.529 li
53.758 299.31 li
50.055 299.31 li
f
1 lw
0 lc
73 320.188 mo
73.022 319.961 li
73.044 319.735 li
75.04 300.761 76.663 280.855 80.574 262.179 cv
80.683 261.712 li
80.791 261.256 li
81.953 256.64 84.522 246.746 88.281 256.58 cv
88.282 256.583 li
88.284 256.587 li
1 /0 /CSD get_res sepcs
.582 sep
@
2 lj
[10 6 ] 0 dsh
73 320.188 mo
73 320.188 li
@
1 lj
[] 0 dsh
88.284 256.587 mo
88.289 257.385 li
88.294 258.172 li
88.299 258.95 li
88.305 259.718 li
88.326 262.794 li
88.348 265.714 li
88.369 268.485 li
88.853 284.35 88.06 302.336 89.707 318.141 cv
89.738 318.288 li
89.769 318.425 li
90.202 320.591 91.353 320.097 93.088 320.188 cv
93.414 320.188 li
97.718 320.188 102.021 320.188 106.325 320.188 cv
106.651 320.188 li
115.403 320.188 124.156 320.188 132.908 320.188 cv
133.233 320.188 li
150.919 320.188 168.604 320.188 186.29 320.188 cv
186.615 320.188 li
222.131 320.188 257.646 320.188 293.162 320.188 cv
293.488 320.188 li
364.628 320.188 435.767 320.188 506.907 320.188 cv
507.052 320.188 li
@
2 lj
[10 6 ] 0 dsh
88.284 256.587 mo
88.284 256.587 li
@
1 lj
[] 0 dsh
73 320.188 mo
73.022 319.967 li
73.044 319.758 li
73.066 319.56 li
73.088 319.372 li
73.116 319.142 li
73.144 318.928 li
73.173 318.728 li
73.613 316.336 73.681 315.847 76.107 315.972 cv
76.297 315.976 li
78.431 316.022 80.564 316.073 82.698 316.12 cv
82.807 316.122 li
82.915 316.125 li
83.024 316.127 li
87.436 316.226 91.849 316.321 96.261 316.412 cv
96.369 316.415 li
96.478 316.417 li
96.586 316.419 li
105.591 316.605 114.597 316.779 123.603 316.939 cv
123.711 316.941 li
123.82 316.943 li
123.928 316.945 li
142.047 317.268 160.167 317.543 178.287 317.783 cv
178.395 317.784 li
178.504 317.786 li
178.612 317.787 li
214.994 318.266 251.379 318.607 287.763 318.87 cv
288.089 318.873 li
361.036 319.395 433.985 319.63 506.933 319.793 cv
507.052 319.793 li
1 /0 /CSD get_res sepcs
.49 sep
@
73 320.188 mo
73.022 319.961 li
73.044 319.735 li
73.066 319.509 li
73.088 319.284 li
73.196 318.17 li
73.305 317.063 li
73.413 315.961 li
75.117 299.461 76.713 282.646 79.706 266.326 cv
79.815 265.768 li
79.923 265.221 li
80.247 264.085 82.733 249.156 86.325 252.999 cv
86.433 253.117 li
86.542 253.245 li
86.65 253.383 li
86.759 253.53 li
90.096 259.118 91.643 269.434 93.052 275.807 cv
93.16 276.371 li
93.269 276.939 li
95.579 289.165 97.511 301.463 99.67 313.716 cv
99.779 314.332 li
99.887 314.947 li
99.996 315.559 li
100.104 316.168 li
100.213 316.775 li
101.16 320.509 106.451 357.431 113.341 355.867 cv
113.45 355.845 li
113.558 355.818 li
119.045 354.074 124.585 331.309 126.687 326.065 cv
126.795 325.733 li
126.904 325.402 li
127.012 325.072 li
127.121 324.743 li
127.229 324.415 li
127.338 324.088 li
129.055 319.428 134.137 301.738 140.466 301.394 cv
140.575 301.386 li
140.683 301.382 li
145.772 301.083 151.392 312.346 153.812 315.947 cv
153.92 316.124 li
154.029 316.3 li
154.137 316.477 li
162.854 330.343 167.73 335.417 180.937 323.029 cv
181.045 322.935 li
181.154 322.842 li
181.262 322.748 li
181.371 322.655 li
181.479 322.561 li
181.588 322.468 li
191.431 313.893 196.508 312.841 208.279 318.469 cv
208.387 318.518 li
208.496 318.568 li
218.871 323.468 224.172 324.043 235.295 321.287 cv
235.404 321.261 li
235.512 321.235 li
235.621 321.209 li
235.729 321.183 li
245.601 318.603 252.299 318.118 262.42 319.521 cv
262.529 319.534 li
262.637 319.548 li
271.957 320.882 280.028 321.33 289.437 320.591 cv
289.979 320.556 li
290.088 320.549 li
290.196 320.542 li
308.473 318.783 325.769 320.876 344.012 320.318 cv
344.121 320.316 li
344.229 320.314 li
362.247 319.803 380.146 320.342 398.154 320.23 cv
398.262 320.23 li
398.371 320.229 li
398.479 320.229 li
434.567 320.113 470.672 320.224 506.762 320.192 cv
506.871 320.191 li
507.052 320.191 li
1 /0 /CSD get_res sepcs
.262 sep
@
362.186 320.086 mo
362.186 321.375 361.142 322.419 359.853 322.419 cv
358.564 322.419 357.52 321.375 357.52 320.086 cv
357.52 318.797 358.564 317.753 359.853 317.753 cv
361.142 317.753 362.186 318.797 362.186 320.086 cv
1 /0 /CSD get_res sepcs
1 sep
f
92.04 318.141 mo
92.04 319.43 90.996 320.474 89.707 320.474 cv
88.418 320.474 87.374 319.43 87.374 318.141 cv
87.374 316.852 88.418 315.808 89.707 315.808 cv
90.996 315.808 92.04 316.852 92.04 318.141 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/VJOHKF+Helvetica*1 uf/VJOHKF+Helvetica uf/BBAAAA+Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
